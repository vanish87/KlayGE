<?xml version='1.0'?>

<effect>
	<include name="util.fxml"/>
	<include name="Copy.fxml"/>
	<include name="Lighting.fxml"/>
	<include name="DeferredRenderingUtil.fxml"/>

	<cbuffer name="sss_cb">
		<parameter type="float2" name="step"/>
		<parameter type="float" name="far_plane"/>
		<parameter type="float" name="correction"/>
	</cbuffer>

	<parameter type="texture2D" name="depth_tex"/>

	<shader>
		<![CDATA[
float4 GuassBlur(float2 texcoord)
{
	// Gaussian weights for the six samples around the current pixel:
	//   -3 -2 -1 +1 +2 +3
	float w[6] = { 0.006f,   0.061f,   0.242f,  0.242f,  0.061f, 0.006f };
	float o[6] = {  -1.0f, -0.6667f, -0.3333f, 0.3333f, 0.6667f,   1.0f };

	// Fetch color and linear depth for current pixel:
	float4 color_m = src_tex.Sample(point_sampler, texcoord);
	float depth_m = ReadAFloat(depth_tex.Sample(point_sampler, texcoord), far_plane);

	// Accumulate center sample, multiplying it with its gaussian weight:
	float4 color_blurred = color_m * 0.382f;
	
	// Calculate the step that we will use to fetch the surrounding pixels,
	// where "step" is:
	//     step = sss_strength * gaussian_width * pixel_size * dir
	// The closer the pixel, the stronger the effect needs to be, hence
	// the factor 1.0 / depth_m.
	float2 final_step = color_m.a * step / depth_m;
	for (int i = 0; i < 6; ++ i)
	{
		// Fetch color and depth for current sample:
		float2 offset = texcoord + o[i] * final_step;
		float3 color = src_tex.Sample(point_sampler, offset).rgb;
		float depth = ReadAFloat(depth_tex.Sample(point_sampler, offset), far_plane);

		// If the difference in depth is huge, we lerp color back to "color_m":
		float s = min(0.0125f * correction * abs(depth_m - depth), 1);
		color = lerp(color, color_m.rgb, s);

		// Accumulate:
		color_blurred.rgb += w[i] * color;
	}

	// The result will be alpha blended with current buffer by using specific
	// RGB weights. For more details, I refer you to the GPU Pro chapter :)
	return color_blurred;
}

float4 BlurRT0PS(float2 texcoord : TEXCOORD0) : SV_Target
{
	return GuassBlur(texcoord);
}

void BlurMRTPS(float2 texcoord : TEXCOORD0,
			out float4 oRT0 : SV_Target0,
			out float4 oRT1 : SV_Target1)
{
	oRT0 = oRT1 = GuassBlur(texcoord);
}
		]]>
	</shader>

	<technique name="Copy">
		<pass name="p1">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="equal"/>
			<state name="front_stencil_ref" value="32"/>
			<state name="front_stencil_read_mask" value="32"/>
			<state name="front_stencil_write_mask" value="0"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="CopyPS()"/>
		</pass>
	</technique>
	
	<technique name="BlurX">
		<pass name="p1">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="equal"/>
			<state name="front_stencil_ref" value="32"/>
			<state name="front_stencil_read_mask" value="32"/>
			<state name="front_stencil_write_mask" value="0"/>
			
			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="BlurRT0PS()"/>
		</pass>
	</technique>

	<technique name="BlurY1">
		<pass name="p1">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="equal"/>
			<state name="front_stencil_ref" value="32"/>
			<state name="front_stencil_read_mask" value="32"/>
			<state name="front_stencil_write_mask" value="0"/>

			<state name="independent_blend_enable" value="true"/>
			<state name="blend_enable" index="0" value="true"/>
			<state name="blend_enable" index="1" value="false"/>
			<state name="blend_op" value="add"/>
			<state name="src_blend" value="blend_factor"/>
			<state name="dest_blend" value="inv_blend_factor"/>
			<state name="blend_op_alpha" value="add"/>
			<state name="src_blend_alpha" value="one"/>
			<state name="dest_blend_alpha" value="one"/>
			<state name="blend_factor" r="0.3251" g="0.45" b="0.3583" a="1"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="BlurMRTPS()"/>
		</pass>
	</technique>
	<technique name="BlurY2" inherit="BlurY1">
		<pass name="p1">
			<state name="blend_factor" r="0.34" g="0.1864" b="0" a="1"/>
		</pass>
	</technique>
	<technique name="BlurY3" inherit="BlurY1">
		<pass name="p1">
			<state name="blend_factor" r="0.46" g="0" b="0.0402" a="1"/>
		</pass>
	</technique>

	<technique name="Accum1">
		<pass name="p1">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="equal"/>
			<state name="front_stencil_ref" value="32"/>
			<state name="front_stencil_read_mask" value="32"/>
			<state name="front_stencil_write_mask" value="0"/>

			<state name="blend_enable" value="true"/>
			<state name="blend_op" value="add"/>
			<state name="src_blend" value="blend_factor"/>
			<state name="dest_blend" value="inv_blend_factor"/>
			<state name="blend_op_alpha" value="add"/>
			<state name="src_blend_alpha" value="one"/>
			<state name="dest_blend_alpha" value="one"/>
			<state name="blend_factor" r="0.3251" g="0.45" b="0.3583" a="1"/>

			<state name="vertex_shader" value="PostProcessVS()"/>
			<state name="pixel_shader" value="CopyPS()"/>
		</pass>
	</technique>
	<technique name="Accum2" inherit="Accum1">
		<pass name="p1">
			<state name="blend_factor" r="0.34" g="0.1864" b="0" a="1"/>
		</pass>
	</technique>
	<technique name="Accum3" inherit="Accum1">
		<pass name="p1">
			<state name="blend_factor" r="0.46" g="0" b="0.0402" a="1"/>
		</pass>
	</technique>


	<cbuffer name="translucency_cb">
		<parameter type="float4x4" name="inv_proj"/>
		<parameter type="float4x4" name="light_view_proj"/>
		<parameter type="float4x4" name="light_view"/>
		<parameter type="float3" name="light_color"/>
		<parameter type="float3" name="light_falloff"/>
		<parameter type="float3" name="light_pos_es"/>
		<parameter type="float" name="strength"/>
		<parameter type="float" name="sm_far_plane"/>
	</cbuffer>

	<parameter type="texture2D" name="shadow_tex"/>
	<parameter type="texture2D" name="shading_tex"/>
	<parameter type="texture2D" name="g_buffer_tex"/>
	<parameter type="texture2D" name="g_buffer_1_tex"/>
	
	<shader>
		<![CDATA[
float3 CalcTransmit(float s)
{
	return float3(0.233f, 0.455f, 0.649f) * exp(-s * s / 0.0064f)
		+ float3(0.1f, 0.336f, 0.344f) * exp(-s * s / 0.0484f)
		+ float3(0.118f, 0.198f, 0.0f) * exp(-s * s / 0.187f)
		+ float3(0.113f, 0.007f, 0.007f) * exp(-s * s / 0.567f)
		+ float3(0.358f, 0.004f, 0.0f) * exp(-s * s / 1.99f)
		+ float3(0.078f, 0.0f, 0.0f) * exp(-s * s / 7.41f);
}

void TranslucencyVS(float4 pos : POSITION,
					out float2 oTex : TEXCOORD0,
					out float3 oViewDir : TEXCOORD1,
					out float4 oPos : SV_Position)
{
	oTex = TexCoordFromPos(pos);
	oPos = pos;

	oViewDir = mul(oPos, inv_proj).xyz;
}

float4 TranslucencyPS(float2 tc : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target0
{
	float4 mrt0 = g_buffer_tex.Sample(point_sampler, tc);
	float4 mrt1 = g_buffer_1_tex.Sample(point_sampler, tc);

	float3 pos_es = view_dir * (ReadAFloat(depth_tex.Sample(point_sampler, tc), far_plane) / view_dir.z);
	float4 light_vp_pos = mul(float4(pos_es, 1), light_view_proj);
	float4 light_view_pos = mul(float4(pos_es, 1), light_view);
	float3 normal = GetNormal(mrt0);

	float2 coord_ls = light_vp_pos.xy / light_vp_pos.w * 0.5f;
	coord_ls.y *= KLAYGE_FLIPPING;
	coord_ls += 0.5f;
	float s = abs(length(light_view_pos.xyz) - ReadAFloat(shadow_tex.Sample(bilinear_sampler, coord_ls), sm_far_plane));

	float3 color = light_color * AttenuationTerm(light_pos_es, pos_es, light_falloff);
	float3 light_vec = normalize(pos_es - light_pos_es);
	float irradiance = max(0.3f + dot(normal, light_vec), 0);
	float3 transmittance = CalcTransmit(s * strength) * color * irradiance * GetDiffuse(mrt1).rgb;
	return float4(transmittance, 1);
}
		]]>
	</shader>

	<technique name="Translucency">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="equal"/>
			<state name="front_stencil_ref" value="32"/>
			<state name="front_stencil_read_mask" value="32"/>
			<state name="front_stencil_write_mask" value="0"/>

			<state name="blend_enable" value="true"/>
			<state name="blend_op" value="add"/>
			<state name="src_blend" value="one"/>
			<state name="dest_blend" value="one"/>
			<state name="blend_op_alpha" value="add"/>
			<state name="src_blend_alpha" value="one"/>
			<state name="dest_blend_alpha" value="one"/>

			<state name="vertex_shader" value="TranslucencyVS()"/>
			<state name="pixel_shader" value="TranslucencyPS()"/>
		</pass>
	</technique>
</effect>
