<?xml version='1.0'?>

<effect>
	<include name="DeferredRendering.fxml"/>

	<cbuffer name="overlap_test">
		<parameter type="float4" name="tile_scale"/>
		<parameter type="float2" name="camera_proj_01"/>
		<parameter type="float3" name="lights_aabb_min" array_size="LIGHT_BATCH"/>
		<parameter type="float3" name="lights_aabb_max" array_size="LIGHT_BATCH"/>
	</cbuffer>
	<cbuffer name="light_batch">
		<parameter type="float4" name="lights_color" array_size="LIGHT_BATCH"/>
		<parameter type="float4" name="lights_pos_es" array_size="LIGHT_BATCH"/>
		<parameter type="float4" name="lights_dir_es" array_size="LIGHT_BATCH"/>
		<parameter type="float4" name="lights_falloff_range" array_size="LIGHT_BATCH"/>
		<parameter type="float4" name="lights_attrib" array_size="LIGHT_BATCH"/>
		<parameter type="float4" name="lights_radius_extend" array_size="LIGHT_BATCH"/>
	</cbuffer>
	<parameter type="texture2D" name="min_max_depth_tex"/>
	<parameter type="texture2D" name="light_index_tex"/>
	<macro name="LT_Ambient" value="0"/>
	<macro name="LT_Sun" value="1"/>
	<macro name="LT_Directional" value="2"/>
	<macro name="LT_Point" value="3"/>
	<macro name="LT_Spot" value="4"/>
	
	<shader>
		<![CDATA[
#if KLAYGE_SHADER_MODEL >= SHADER_MODEL(4, 0)
#define INTEGER_SUPPORT 1
#endif
 
void DrawLightIndexVS(float4 pos : POSITION,
			out float2 oTexCoord : TEXCOORD0,
			out float4 oPos : SV_Position)
{
	oPos = pos;

	oTexCoord = pos.xy / 2;
	oTexCoord.y *= KLAYGE_FLIPPING;
	oTexCoord += 0.5f;
}

void CalcTileViewFrustum(float2 tc, float2 min_max, out float4 planes[6])
{
	float near_plane = min_max.x;
	float far_plane = min_max.y;
	
	if (far_plane - near_plane < 1e-3f)
	{
		far_plane += 1e-3f;
	}

	float2 tile_bias = tile_scale.xy - floor(tc * tile_scale.zw);
	float q = far_plane / (far_plane - near_plane);

	float4 column1 = float4(camera_proj_01.x, 0, tile_bias.x, 0);
	float4 column2 = float4(0, -camera_proj_01.y, tile_bias.y, 0);
	float4 column3 = float4(0, 0, q, -near_plane * q);
	float4 column4 = float4(0, 0, 1, 0);
	planes[0] = column4 - column1;
	planes[1] = column4 + column1;
	planes[2] = column4 - column2;
	planes[3] = column4 + column2;
	planes[4] = column4 - column3;
	// TODO: Should be column3 only
	planes[5] = column4 + column3;
	for (int i = 0; i < 6; ++ i)
	{
		planes[i] /= length(planes[i].xyz);
	}
}

int OverlapTestPoint(float4 planes[6], int light_index)
{
	int overlap = 1;
	for (int j = 0; j < 6; ++ j)
	{
		float d = dot(planes[j], float4(lights_pos_es[light_index].xyz, 1));
		overlap *= (d > -lights_falloff_range[light_index].w);
	}

	return overlap;
}

int OverlapTestSpot(float4 planes[6], int light_index)
{
	float3 min_pt = lights_aabb_min[light_index];
	float3 max_pt = lights_aabb_max[light_index];

	int overlap = 1;
	for (int j = 0; j < 6; ++ j)
	{
		float4 plane = planes[j];
		float3 v0 = plane.xyz < 0 ? min_pt : max_pt;
		overlap *= (dot(plane, float4(v0, 1)) >= 0);
	}

	return overlap;
}

float4 DrawLightIndexPointPS(float2 tc : TEXCOORD0) : SV_Target
{
	float2 min_max = ReadTwoHalf(min_max_depth_tex.Sample(point_sampler, tc), depth_near_far_invfar.y);
	float4 planes[6];
	CalcTileViewFrustum(tc, min_max, planes);

	int num_lights = int(lights_attrib[0].w);

#if INTEGER_SUPPORT
	uint accum = 0;

	for (int index = 0; index < num_lights; ++ index)
	{
		if (OverlapTestPoint(planes, index))
		{
			accum |= (1UL << index);
		}
	}

	return float4(uint4(accum & 0xFF, accum >> 8,
		accum >> 16, accum >> 24) & 0xFF) / 255.0f;
#else
	float all_light_id[4] = { 0, 0, 0, 0 };

	int nl = LIGHT_BATCH;
	// TODO: DXBC2GLSL has a problem in min(int, int)
	if (num_lights < nl)
	{
		nl = num_lights;
	}

#if LIGHT_BATCH > 4
	int index = 0;
	for (int comp = 0, li = 0; li < nl; li += 8, ++ comp)
	{
		uint accum = 0;
		for (uint mask = 1; mask < 256; mask += mask, ++ index)
		{
			if (OverlapTestPoint(planes, index))
			{
				accum += mask;
			}
		}

		all_light_id[comp] = (accum + 0.5f) / 255.0f;
	}
#else
	[unroll]
	for (int index = 0; index < nl; ++ index)
	{
		if (OverlapTestPoint(planes, index))
		{
			all_light_id[index] = 1;
		}
	}
#endif

	return float4(all_light_id);
#endif
}

float4 DrawLightIndexSpotPS(float2 tc : TEXCOORD0) : SV_Target
{
	float2 min_max = ReadTwoHalf(min_max_depth_tex.Sample(point_sampler, tc), depth_near_far_invfar.y);
	float4 planes[6];
	CalcTileViewFrustum(tc, min_max, planes);
	
	int num_lights = int(lights_attrib[0].w);

#if INTEGER_SUPPORT
	uint accum = 0;
	
	for (int index = 0; index < num_lights; ++ index)
	{
		if (OverlapTestSpot(planes, index))
		{
			accum |= (1UL << index);
		}
	}

	return float4(uint4(accum & 0xFF, accum >> 8,
		accum >> 16, accum >> 24) & 0xFF) / 255.0f;
#else
	float all_light_id[4] = { 0, 0, 0, 0 };

	int nl = LIGHT_BATCH;
	// TODO: DXBC2GLSL has a problem in min(int, int)
	if (num_lights < nl)
	{
		nl = num_lights;
	}

#if LIGHT_BATCH > 4
	int index = 0;
	for (int comp = 0, li = 0; li < nl; li += 8, ++ comp)
	{
		uint accum = 0;
		for (uint mask = 1; mask < 256; mask += mask, ++ index)
		{
			if (OverlapTestSpot(planes, index))
			{
				accum += mask;
			}
		}
		
		all_light_id[comp] = (accum + 0.5f) / 255.0f;
	}
#else
	[unroll]
	for (int index = 0; index < nl; ++ index)
	{
		if (OverlapTestSpot(planes, index))
		{
			all_light_id[index] = 1;
		}
	}
#endif

	return float4(all_light_id);
#endif
}

void LIDRVS(float4 pos : POSITION,
			out float2 oTexCoord : TEXCOORD0,
			out float3 oViewDir : TEXCOORD1,
			out float4 oPos : SV_Position)
{
	oPos = pos;

	oViewDir = mul(pos, light_volume_mv).xyz;
	oTexCoord = pos.xy / 2;
	oTexCoord.y *= KLAYGE_FLIPPING;
	oTexCoord += 0.5f;
}

float4 LIDRAmbientPS(float2 tc : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
	float4 ndc = g_buffer_tex.Sample(point_sampler, tc);
	view_dir = normalize(view_dir);
	float3 normal = GetNormal(ndc);
	float shininess = GetShininess(ndc);

	float4 lighting = CalcColor(0.5f + 0.5f * dot(light_dir_es.xyz, normal), 0, 1, 1, light_color, light_attrib);
	
	float4 mrt1 = g_buffer_1_tex.Sample(point_sampler, tc);
	float4 shading = float4(Shading(lighting, shininess, GetDiffuse(mrt1), GetSpecular(mrt1), -view_dir, normal), 1);
	shading += SkylightShading(shininess, mrt1, normal, -view_dir);
	return shading;
}

float4 LIDRSunPS(float2 tc : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
#if KLAYGE_DERIVATIVES
	float2 tc_ddx = ddx(tc);
	float2 tc_ddy = ddy(tc);
#else
	float2 tc_ddx = 0;
	float2 tc_ddy = 0;
#endif
	
	float4 shading = 0;

	float4 ndc = g_buffer_tex.Sample(point_sampler, tc);
	float3 normal = GetNormal(ndc);

	float3 dir = light_dir_es.xyz;
	float n_dot_l = dot(normal, dir);
	if (n_dot_l > 0)
	{
		view_dir = normalize(view_dir);

		float spec = roughness_term(normalize(dir - view_dir), normal, GetShininess(ndc)).x;
		float3 shadow = 1;
		if (shadowing_channel >= 0)
		{
			shadow = NearestDepthUpsamplingShadow(tc, tc_ddx, tc_ddy, shadowing_channel).xyz;
		}
		float4 lighting = CalcColor(n_dot_l, spec, 1, shadow, light_color, light_attrib);

		float shininess = GetShininess(ndc);
		float4 mrt1 = g_buffer_1_tex.Sample(point_sampler, tc);
		shading = float4(Shading(lighting, shininess, GetDiffuse(mrt1), GetSpecular(mrt1), -view_dir, normal), 1);
	}
	
	return shading;
}

float4 LIDRDirectionalPS(float2 tc : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
	float4 lighting = 0;

	float4 ndc = g_buffer_tex.Sample(point_sampler, tc);
	view_dir = normalize(view_dir);
	float3 pos_es = view_dir * (ReadAFloat(depth_tex.Sample(point_sampler, tc), depth_near_far_invfar.y) / view_dir.z);
	float3 normal = GetNormal(ndc);
	float shininess = GetShininess(ndc);
	
	int num_lights = int(lights_attrib[0].w);

	for (int i = 0; i < num_lights; ++ i)
	{
		float3 dir = lights_dir_es[i].xyz;
		float n_dot_l = dot(normal, dir);
		if (n_dot_l > 0)
		{
			float spec = roughness_term(normalize(dir - view_dir), normal, shininess).x;
			lighting += CalcColor(n_dot_l, spec, 1, 1, lights_color[i], lights_attrib[i]);
		}
	}

	float4 mrt1 = g_buffer_1_tex.Sample(point_sampler, tc);
	return float4(Shading(lighting, shininess, GetDiffuse(mrt1), GetSpecular(mrt1), -view_dir, normal), 1);
}

float4 CalcLIDRLighting(float3 light_pos, int index, int shadowing_channel, float3 pos_es, float3 normal, float3 view_dir,
		float shininess, float2 tc, float atten, float irradiance_factor, float2 tc_ddx, float2 tc_ddy)
{
	float4 lighting = 0;
	float3 dir = light_pos - pos_es;
	float dist = length(dir);
	if (dist < lights_falloff_range[index].w)
	{
		dir /= dist;
		float n_dot_l = dot(normal, dir);
		if (n_dot_l > 0)
		{
			float3 shadow = 1;
#if WITH_SHADOW
			shadow = NearestDepthUpsamplingShadow(tc, tc_ddx, tc_ddy, shadowing_channel).xyz;
#endif

			float spec = roughness_term(normalize(dir - view_dir), normal, shininess).x;
			lighting = CalcColor(n_dot_l, spec, atten, shadow, irradiance_factor * lights_color[index], lights_attrib[index]);
		}
	}

	return lighting;
}

float4 CalcLIDRPointLighting(int index, float3 pos_es, float3 normal, float3 view_dir,
		float shininess, float2 tc, float2 tc_ddx, float2 tc_ddy)
{
	float3 light_pos = lights_pos_es[index].xyz;
	return CalcLIDRLighting(light_pos, index, int(lights_attrib[index].z), pos_es, normal, view_dir,
		shininess, tc,
		attenuation_term(light_pos, pos_es, lights_falloff_range[index].xyz), 1, tc_ddx, tc_ddy);
}

float4 CalcLIDRSpotLighting(int index, float3 pos_es, float3 normal, float3 view_dir,
		float shininess, float2 tc, float2 tc_ddx, float2 tc_ddy)
{
	float3 light_pos = lights_pos_es[index].xyz;
	float4 lighting = 0;
	float spot = spot_lighting(light_pos, lights_dir_es[index].xyz,
		float2(lights_pos_es[index].w, lights_dir_es[index].w), pos_es);
	if (spot > 0)
	{
		lighting = CalcLIDRLighting(light_pos, index, int(lights_attrib[index].z), pos_es, normal, view_dir,
			shininess, tc,
			spot * attenuation_term(light_pos, pos_es, lights_falloff_range[index].xyz), 1, tc_ddx, tc_ddy);
	}
	
	return lighting;
}

float4 CalcLIDRSphereAreaLighting(int index, float3 pos_es, float3 normal, float3 view_dir,
		float shininess, float2 tc, float2 tc_ddx, float2 tc_ddy)
{
	float3 light_pos = lights_pos_es[index].xyz;
	light_pos = SphereAreaLightPositionFixup(light_pos, lights_radius_extend[index].x, pos_es,
		normal, view_dir);
	shininess = AreaLightShininessFixup(shininess, light_pos, lights_radius_extend[index].x, pos_es);
	return CalcLIDRLighting(light_pos, index, int(lights_attrib[index].z), pos_es, normal, view_dir,
		shininess, tc, 
		attenuation_term(lights_pos_es[index].xyz, pos_es, lights_falloff_range[index].xyz), 1, tc_ddx, tc_ddy);
}

float4 CalcLIDRTubeAreaLighting(int index, float3 pos_es, float3 normal, float3 view_dir,
		float shininess, float2 tc, float2 tc_ddx, float2 tc_ddy)
{
	float3 l0 = lights_pos_es[index].xyz - lights_radius_extend[index].yzw - pos_es;
	float3 l1 = lights_pos_es[index].xyz + lights_radius_extend[index].yzw - pos_es;
	float3 light_pos = TubeAreaLightPositionFixup(l0, l1, pos_es, normal, view_dir);
	float2 atten_irra_factor = TubeAreaLightAttenuationIrradianceFixup(l0, l1, normal);
	shininess = AreaLightShininessFixup(shininess, lights_pos_es[index].xyz, lights_radius_extend[index].x, pos_es);
	return CalcLIDRLighting(light_pos, index, int(lights_attrib[index].z), pos_es, normal, view_dir,
		shininess, tc, atten_irra_factor.x, atten_irra_factor.y, tc_ddx, tc_ddy);
}

float4 LIDRPointPS(float2 tc : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
#if KLAYGE_DERIVATIVES
	float2 tc_ddx = ddx(tc);
	float2 tc_ddy = ddy(tc);
#else
	float2 tc_ddx = 0;
	float2 tc_ddy = 0;
#endif

	int num_lights = int(lights_attrib[0].w);
	
	float4 shading = 0;
	float2 tc_to_tile_scale = float2(lights_attrib[1].w, lights_attrib[2].w);
	int4 light_index = light_index_tex.Sample(point_sampler, tc * tc_to_tile_scale) * 255 + 0.5f;
	if (any(light_index))
	{
		float4 lighting = 0;
		float4 ndc = g_buffer_tex.Sample(point_sampler, tc);
		view_dir = normalize(view_dir);
		float3 pos_es = view_dir * (ReadAFloat(depth_tex.Sample(point_sampler, tc), depth_near_far_invfar.y) / view_dir.z);
		float3 normal = GetNormal(ndc);
		float shininess = GetShininess(ndc);

#if INTEGER_SUPPORT
		uint light_index_all = light_index.x | (light_index.y << 8) | (light_index.z << 16) | (light_index.w << 24);
		uint nl = countbits(light_index_all);
		for (uint il = 0; il < nl; ++ il)
		{
			uint index = firstbitlow(light_index_all);
			lighting += CalcLIDRPointLighting(index, pos_es, normal, view_dir, shininess, tc, tc_ddx, tc_ddy);
			light_index_all = light_index_all & (light_index_all - 1);
		}
#else
#if WITH_SHADOW
		int nl = 4;
#else
		int nl = LIGHT_BATCH;
#endif
		// TODO: DXBC2GLSL has a problem in min(int, int)
		if (num_lights < nl)
		{
			nl = num_lights;
		}

#if LIGHT_BATCH > 4
		for (uint comp = 0, li = 0; li < nl; ++ comp, li += 8)
		{
			uint index = li + 7;
			uint mask = 128;
			uint light_comp = light_index[comp];

			[loop]
			while (mask > 0)
			{
				[branch]
				if (mask <= light_comp)
				{
					lighting += CalcLIDRPointLighting(index, pos_es, normal, view_dir, shininess, tc, tc_ddx, tc_ddy);
					light_comp -= mask;
				}

				mask /= 2;
				-- index;
			}
		}
#else
		[unroll]
		for (int index = 0; index < nl; ++ index)
		{
			if (light_index[index])
			{
				lighting += CalcLIDRPointLighting(index, pos_es, normal, view_dir, shininess, tc, tc_ddx, tc_ddy);
			}
		}
#endif
#endif

		float4 mrt1 = g_buffer_1_tex.Sample(point_sampler, tc);
		shading = float4(Shading(lighting, shininess, GetDiffuse(mrt1), GetSpecular(mrt1), -view_dir, normal), 1);
	}

	return shading;
}

float4 LIDRSpotPS(float2 tc : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
#if KLAYGE_DERIVATIVES
	float2 tc_ddx = ddx(tc);
	float2 tc_ddy = ddy(tc);
#else
	float2 tc_ddx = 0;
	float2 tc_ddy = 0;
#endif

	int num_lights = int(lights_attrib[0].w);
	
	float4 shading = 0;
	float2 tc_to_tile_scale = float2(lights_attrib[1].w, lights_attrib[2].w);
	int4 light_index = light_index_tex.Sample(point_sampler, tc * tc_to_tile_scale) * 255 + 0.5f;
	if (any(light_index))
	{
		float4 lighting = 0;
		float4 ndc = g_buffer_tex.Sample(point_sampler, tc);
		view_dir = normalize(view_dir);
		float3 pos_es = view_dir * (ReadAFloat(depth_tex.Sample(point_sampler, tc), depth_near_far_invfar.y) / view_dir.z);
		float3 normal = GetNormal(ndc);
		float shininess = GetShininess(ndc);

#if INTEGER_SUPPORT
		uint light_index_all = light_index.x | (light_index.y << 8) | (light_index.z << 16) | (light_index.w << 24);
		uint nl = countbits(light_index_all);
		for (uint il = 0; il < nl; ++ il)
		{
			uint index = firstbitlow(light_index_all);
			lighting += CalcLIDRSpotLighting(index, pos_es, normal, view_dir, shininess, tc, tc_ddx, tc_ddy);
			light_index_all = light_index_all & (light_index_all - 1);
		}
#else
#if WITH_SHADOW
		int nl = 4;
#else
		int nl = LIGHT_BATCH;
#endif
		// TODO: DXBC2GLSL has a problem in min(int, int)
		if (num_lights < nl)
		{
			nl = num_lights;
		}

#if LIGHT_BATCH > 4
		for (uint comp = 0, li = 0; li < nl; ++ comp, li += 8)
		{
			uint index = li + 7;
			uint mask = 128;
			uint light_comp = light_index[comp];

			[loop]
			while (mask > 0)
			{
				[branch]
				if (mask <= light_comp)
				{
					lighting += CalcLIDRSpotLighting(index, pos_es, normal, view_dir, shininess, tc, tc_ddx, tc_ddy);
					light_comp -= mask;
				}

				mask /= 2;
				-- index;
			}
		}
#else
		[unroll]
		for (int index = 0; index < nl; ++ index)
		{
			if (light_index[index])
			{
				lighting += CalcLIDRSpotLighting(index, pos_es, normal, view_dir, shininess, tc, tc_ddx, tc_ddy);
			}
		}
#endif
#endif

		float4 mrt1 = g_buffer_1_tex.Sample(point_sampler, tc);
		shading = float4(Shading(lighting, shininess, GetDiffuse(mrt1), GetSpecular(mrt1), -view_dir, normal), 1);
	}

	return shading;
}

float4 LIDRSphereAreaPS(float2 tc : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
#if KLAYGE_DERIVATIVES
	float2 tc_ddx = ddx(tc);
	float2 tc_ddy = ddy(tc);
#else
	float2 tc_ddx = 0;
	float2 tc_ddy = 0;
#endif

	int num_lights = int(lights_attrib[0].w);
	
	float4 shading = 0;
	float2 tc_to_tile_scale = float2(lights_attrib[1].w, lights_attrib[2].w);
	int4 light_index = light_index_tex.Sample(point_sampler, tc * tc_to_tile_scale) * 255 + 0.5f;
	if (any(light_index))
	{
		float4 lighting = 0;
		float4 ndc = g_buffer_tex.Sample(point_sampler, tc);
		view_dir = normalize(view_dir);
		float3 pos_es = view_dir * (ReadAFloat(depth_tex.Sample(point_sampler, tc), depth_near_far_invfar.y) / view_dir.z);
		float3 normal = GetNormal(ndc);
		float shininess = GetShininess(ndc);

#if INTEGER_SUPPORT
		uint light_index_all = light_index.x | (light_index.y << 8) | (light_index.z << 16) | (light_index.w << 24);
		uint nl = countbits(light_index_all);
		for (uint il = 0; il < nl; ++ il)
		{
			uint index = firstbitlow(light_index_all);
			lighting += CalcLIDRSphereAreaLighting(index, pos_es, normal, view_dir, shininess, tc, tc_ddx, tc_ddy);
			light_index_all = light_index_all & (light_index_all - 1);
		}
#else
#if WITH_SHADOW
		int nl = 4;
#else
		int nl = LIGHT_BATCH;
#endif
		// TODO: DXBC2GLSL has a problem in min(int, int)
		if (num_lights < nl)
		{
			nl = num_lights;
		}

#if LIGHT_BATCH > 4
		for (uint comp = 0, li = 0; li < nl; ++ comp, li += 8)
		{
			uint index = li + 7;
			uint mask = 128;
			uint light_comp = light_index[comp];

			[loop]
			while (mask > 0)
			{
				[branch]
				if (mask <= light_comp)
				{
					lighting += CalcLIDRSphereAreaLighting(index, pos_es, normal, view_dir, shininess, tc, tc_ddx, tc_ddy);
					light_comp -= mask;
				}

				mask /= 2;
				-- index;
			}
		}
#else
		[unroll]
		for (int index = 0; index < nl; ++ index)
		{
			if (light_index[index])
			{
				lighting += CalcLIDRSphereAreaLighting(index, pos_es, normal, view_dir, shininess, tc, tc_ddx, tc_ddy);
			}
		}
#endif
#endif

		float4 mrt1 = g_buffer_1_tex.Sample(point_sampler, tc);
		shading = float4(Shading(lighting, shininess, GetDiffuse(mrt1), GetSpecular(mrt1), -view_dir, normal), 1);
	}

	return shading;
}


float4 LIDRTubeAreaPS(float2 tc : TEXCOORD0, float3 view_dir : TEXCOORD1) : SV_Target
{
#if KLAYGE_DERIVATIVES
	float2 tc_ddx = ddx(tc);
	float2 tc_ddy = ddy(tc);
#else
	float2 tc_ddx = 0;
	float2 tc_ddy = 0;
#endif

	int num_lights = int(lights_attrib[0].w);
	
	float4 shading = 0;
	float2 tc_to_tile_scale = float2(lights_attrib[1].w, lights_attrib[2].w);
	int4 light_index = light_index_tex.Sample(point_sampler, tc * tc_to_tile_scale) * 255 + 0.5f;
	if (any(light_index))
	{
		float4 lighting = 0;
		float4 ndc = g_buffer_tex.Sample(point_sampler, tc);
		view_dir = normalize(view_dir);
		float3 pos_es = view_dir * (ReadAFloat(depth_tex.Sample(point_sampler, tc), depth_near_far_invfar.y) / view_dir.z);
		float3 normal = GetNormal(ndc);
		float shininess = GetShininess(ndc);

#if INTEGER_SUPPORT
		uint light_index_all = light_index.x | (light_index.y << 8) | (light_index.z << 16) | (light_index.w << 24);
		uint nl = countbits(light_index_all);
		for (uint il = 0; il < nl; ++ il)
		{
			uint index = firstbitlow(light_index_all);
			lighting += CalcLIDRTubeAreaLighting(index, pos_es, normal, view_dir, shininess, tc, tc_ddx, tc_ddy);
			light_index_all = light_index_all & (light_index_all - 1);
		}
#else
#if WITH_SHADOW
		int nl = 4;
#else
		int nl = LIGHT_BATCH;
#endif
		// TODO: DXBC2GLSL has a problem in min(int, int)
		if (num_lights < nl)
		{
			nl = num_lights;
		}

#if LIGHT_BATCH > 4
		for (uint comp = 0, li = 0; li < nl; ++ comp, li += 8)
		{
			uint index = li + 7;
			uint mask = 128;
			uint light_comp = light_index[comp];

			[loop]
			while (mask > 0)
			{
				[branch]
				if (mask <= light_comp)
				{
					lighting += CalcLIDRTubeAreaLighting(index, pos_es, normal, view_dir, shininess, tc, tc_ddx, tc_ddy);
					light_comp -= mask;
				}

				mask /= 2;
				-- index;
			}
		}
#else
		[unroll]
		for (int index = 0; index < nl; ++ index)
		{
			if (light_index[index])
			{
				lighting += CalcLIDRTubeAreaLighting(index, pos_es, normal, view_dir, shininess, tc, tc_ddx, tc_ddy);
			}
		}
#endif
#endif

		float4 mrt1 = g_buffer_1_tex.Sample(point_sampler, tc);
		shading = float4(Shading(lighting, shininess, GetDiffuse(mrt1), GetSpecular(mrt1), -view_dir, normal), 1);
	}

	return shading;
}
		]]>
	</shader>
		
	<technique name="DrawLightIndexPoint">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="cull_mode" value="front"/>

			<state name="vertex_shader" value="DrawLightIndexVS()"/>
			<state name="pixel_shader" value="DrawLightIndexPointPS()"/>
		</pass>
	</technique>
	<technique name="DrawLightIndexSpot" inherit="DrawLightIndexPoint">
		<pass name="p0">
			<state name="pixel_shader" value="DrawLightIndexSpotPS()"/>
		</pass>
	</technique>

	<technique name="LIDRAmbient">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="cull_mode" value="front"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="not_equal"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="keep"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="not_equal"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="keep"/>

			<state name="vertex_shader" value="LIDRVS()"/>			
			<state name="pixel_shader" value="LIDRAmbientPS()"/>
		</pass>
	</technique>
	<technique name="LIDRSun" inherit="LIDRAmbient">
		<pass name="p0">
			<state name="blend_enable" value="true"/>
			<state name="blend_op" value="add"/>
			<state name="src_blend" value="one"/>
			<state name="dest_blend" value="one"/>
			<state name="blend_op_alpha" value="add"/>
			<state name="src_blend_alpha" value="one"/>
			<state name="dest_blend_alpha" value="one"/>

			<state name="pixel_shader" value="LIDRSunPS()"/>
		</pass>
	</technique>
	<technique name="LIDRDirectional" inherit="LIDRSun">
		<pass name="p0">
			<state name="pixel_shader" value="LIDRDirectionalPS()"/>
		</pass>
	</technique>
	<technique name="LIDRPointShadow" inherit="LIDRDirectional">
		<macro name="WITH_SHADOW" value="1"/>
		<pass name="p0">
			<state name="pixel_shader" value="LIDRPointPS()"/>
		</pass>
	</technique>
	<technique name="LIDRPointNoShadow" inherit="LIDRPointShadow">
		<macro name="WITH_SHADOW" value="0"/>
	</technique>
	<technique name="LIDRSpotShadow" inherit="LIDRDirectional">
		<macro name="WITH_SHADOW" value="1"/>
		<pass name="p0">
			<state name="pixel_shader" value="LIDRSpotPS()"/>
		</pass>
	</technique>
	<technique name="LIDRSpotNoShadow" inherit="LIDRSpotShadow">
		<macro name="WITH_SHADOW" value="0"/>
	</technique>
	<technique name="LIDRSphereAreaShadow" inherit="LIDRDirectional">
		<macro name="WITH_SHADOW" value="1"/>
		<pass name="p0">
			<state name="pixel_shader" value="LIDRSphereAreaPS()"/>
		</pass>
	</technique>
	<technique name="LIDRSphereAreaNoShadow" inherit="LIDRSphereAreaShadow">
		<macro name="WITH_SHADOW" value="0"/>
	</technique>
	<technique name="LIDRTubeAreaShadow" inherit="LIDRDirectional">
		<macro name="WITH_SHADOW" value="1"/>
		<pass name="p0">
			<state name="pixel_shader" value="LIDRTubeAreaPS()"/>
		</pass>
	</technique>
	<technique name="LIDRTubeAreaNoShadow" inherit="LIDRTubeAreaShadow">
		<macro name="WITH_SHADOW" value="0"/>
	</technique>
</effect>
