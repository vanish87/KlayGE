<?xml version='1.0'?>

<effect>
	<macro name="LIGHT_BATCH" value="1024"/>
	
	<include name="DeferredRendering.fxml"/>

	<macro name="BLOCK_X" value="8"/>
	<macro name="BLOCK_Y" value="8"/>
	<macro name="BLOCK_SIZE" value="(BLOCK_X * BLOCK_Y)"/>
	<macro name="TILE_SIZE" value="32"/>

	<parameter type="float4" name="near_q_far"/>
	<parameter type="uint2" name="width_height"/>
	<parameter type="texture2D" name="depth_in_tex"/>
	<parameter type="rw_texture2D" elem_type="float2" name="min_max_depth_rw_tex"/>
	<parameter type="rw_texture2D" elem_type="float" name="linear_depth_rw_tex"/>

	<shader type="compute_shader" version="5">
		<![CDATA[
groupshared float2 min_max_z_sh[BLOCK_SIZE];

[numthreads(BLOCK_X, BLOCK_Y, 1)]
void DepthToTiledMinMaxCS(uint3 gid : SV_GroupID,
							uint3 gtid : SV_GroupThreadID,
							uint GI : SV_GroupIndex)
{
	float2 min_max_z = float2(asfloat(0x7F7FFFFF), 0.0f);
	
	uint2 tile_start = gid.xy * TILE_SIZE + gtid.xy;
	for (uint tile_y = 0; tile_y < TILE_SIZE; tile_y += BLOCK_Y)
	{
		for (uint tile_x = 0; tile_x < TILE_SIZE; tile_x += BLOCK_X)
		{
			uint2 coord = tile_start + uint2(tile_x, tile_y);
			float depth = non_linear_depth_to_linear(depth_in_tex.Load(uint3(min(coord, width_height), 0)).x, near_q_far.x, near_q_far.y);
			linear_depth_rw_tex[coord] = depth;
			min_max_z = float2(min(min_max_z.x, depth), max(min_max_z.y, depth));
		}
	}

	min_max_z_sh[GI] = min_max_z;
	GroupMemoryBarrierWithGroupSync();

	[unroll]
	for (uint offset = BLOCK_SIZE >> 1; offset > 32; offset >>= 1)
	{
		if (GI < offset)
		{
			min_max_z_sh[GI].x = min(min_max_z_sh[GI].x, min_max_z_sh[GI + offset].x);
			min_max_z_sh[GI].y = max(min_max_z_sh[GI].y, min_max_z_sh[GI + offset].y);
		}
		GroupMemoryBarrierWithGroupSync();
	}
	[unroll]
	for (offset = 32; offset > 0; offset >>= 1)
	{
		if (GI < offset)
		{
			min_max_z_sh[GI].x = min(min_max_z_sh[GI].x, min_max_z_sh[GI + offset].x);
			min_max_z_sh[GI].y = max(min_max_z_sh[GI].y, min_max_z_sh[GI + offset].y);
		}
	}
	
	if (0 == GI)
	{
		min_max_depth_rw_tex[gid.xy] = min_max_z_sh[0];
	}
}
		]]>
	</shader>

	<technique name="DepthToTiledMinMax">
		<pass name="p0">
			<state name="compute_shader" value="DepthToTiledMinMaxCS()"/>
		</pass>
	</technique>

	<shader>
		<![CDATA[
void TBDRLightingMaskVS(float4 pos : POSITION,
			out float4 oPos : SV_Position)
{
	oPos = pos;
}

float4 TBDRLightingMaskPS() : SV_Target
{
	return 1;
}
		]]>
	</shader>

	<technique name="TBDRLightingMask">
		<pass name="p0">
			<state name="depth_enable" value="false"/>
			<state name="depth_write_mask" value="false"/>

			<state name="cull_mode" value="front"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="not_equal"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="keep"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="not_equal"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="keep"/>

			<state name="vertex_shader" value="TBDRLightingMaskVS()"/>
			<state name="pixel_shader" value="TBDRLightingMaskPS()"/>
		</pass>
	</technique>

	<cbuffer name="overlap_test">
		<parameter type="float4" name="tile_scale"/>
		<parameter type="float2" name="camera_proj_01"/>
		<parameter type="float3" name="lights_aabb_min" array_size="LIGHT_BATCH"/>
		<parameter type="float3" name="lights_aabb_max" array_size="LIGHT_BATCH"/>
	</cbuffer>
	<cbuffer name="light_batch1">
		<parameter type="float4" name="lights_color" array_size="LIGHT_BATCH"/>
		<parameter type="float4" name="lights_pos_es" array_size="LIGHT_BATCH"/>
		<parameter type="float4" name="lights_dir_es" array_size="LIGHT_BATCH"/>
		<parameter type="float4" name="lights_falloff_range" array_size="LIGHT_BATCH"/>
	</cbuffer>
	<cbuffer name="light_batch2">
		<parameter type="float4" name="lights_attrib" array_size="LIGHT_BATCH"/>
		<parameter type="float4" name="lights_radius_extend" array_size="LIGHT_BATCH"/>
		<parameter type="uint" name="lights_type" array_size="12"/>
	</cbuffer>
	<parameter type="texture2D" name="min_max_depth_tex"/>
	<parameter type="texture2D" name="lighting_mask_tex"/>
	<parameter type="texture2D" name="shading_in_tex"/>
	<parameter type="rw_texture2D" name="shading_rw_tex"/>

	<parameter type="float3" name="upper_left"/>
	<parameter type="float3" name="x_dir"/>
	<parameter type="float3" name="y_dir"/>
	<parameter type="int" name="read_no_lighting"/>

	<shader type="compute_shader" version="5">
		<![CDATA[
void CalcTileViewFrustum(uint2 coord, float2 min_max, out float4 planes[6])
{
	float near_plane = min_max.x;
	float far_plane = min_max.y;
	
	if (far_plane - near_plane < 1e-3f)
	{
		far_plane += 1e-3f;
	}

	float2 tile_bias = tile_scale.xy - coord;
	float q = far_plane / (far_plane - near_plane);

	float4 column1 = float4(camera_proj_01.x, 0, tile_bias.x, 0);
	float4 column2 = float4(0, -camera_proj_01.y, tile_bias.y, 0);
	float4 column3 = float4(0, 0, q, -near_plane * q);
	float4 column4 = float4(0, 0, 1, 0);
	planes[0] = column4 - column1;
	planes[1] = column4 + column1;
	planes[2] = column4 - column2;
	planes[3] = column4 + column2;
	planes[4] = column4 - column3;
	// TODO: Should be column3 only
	planes[5] = column4 + column3;
	for (int i = 0; i < 6; ++ i)
	{
		planes[i] /= length(planes[i].xyz);
	}
}

int OverlapTestPoint(float4 planes[6], uint light_index)
{
	int overlap = 1;
	for (int j = 0; j < 6; ++ j)
	{
		float d = dot(planes[j], float4(lights_pos_es[light_index].xyz, 1));
		overlap *= (d > -lights_falloff_range[light_index].w);
	}

	return overlap;
}

int OverlapTestSpot(float4 planes[6], uint light_index)
{
	float3 min_pt = lights_aabb_min[light_index];
	float3 max_pt = lights_aabb_max[light_index];

	int overlap = 1;
	for (int j = 0; j < 6; ++ j)
	{
		float4 plane = planes[j];
		float3 v0 = plane.xyz < 0 ? min_pt : max_pt;
		overlap *= (dot(plane, float4(v0, 1)) >= 0);
	}

	return overlap;
}

float3 texcoord_to_view(float2 tex)
{
	return upper_left + x_dir * tex.x + y_dir * tex.y;
}

float4 NearestDepthUpsamplingShadowLevel(float2 tc, int channel)
{
	float2 l1_inv_width_height = inv_width_height * 2;
	float2 tc0 = tc - inv_width_height;
	float z00 = depth_tex.SampleLevel(point_sampler, tc0, 1).x;
	float z10 = depth_tex.SampleLevel(point_sampler, tc0 + float2(l1_inv_width_height.x, 0), 1).x;
	float z01 = depth_tex.SampleLevel(point_sampler, tc0 + float2(0, l1_inv_width_height.y), 1).x;
	float z11 = depth_tex.SampleLevel(point_sampler, tc0 + l1_inv_width_height, 1).x;
	float z_full = depth_tex.SampleLevel(point_sampler, tc, 0).x;
	float threshold = 0.25f;

	float3 ndus = NearestDepthUpsampling(tc0, float4(z00, z10, z01, z11), z_full, l1_inv_width_height, threshold);
	if (ndus.z > 0)
	{
		if (channel < 4)
		{
			return shadowing_tex.SampleLevel(linear_sampler, tc, 0)[channel];
		}
		else
		{
			return projective_shadowing_tex.SampleLevel(linear_sampler, tc, 0);
		}
	}
	else
	{
		if (channel < 4)
		{
			return shadowing_tex.SampleLevel(point_sampler, ndus.xy, 0)[channel];
		}
		else
		{
			return projective_shadowing_tex.SampleLevel(point_sampler, ndus.xy, 0);
		}
	}
}

float3 CalcTBDRShading(float3 light_pos, int index, int shadowing_channel, float3 pos_es, float3 normal, float3 view_dir,
		float3 c_diff, float3 c_spec, float spec_normalize, float shininess, float2 tc, bool with_shadow, float atten, float irradiance_factor)
{
	float3 shading = 0;
	float3 dir = light_pos - pos_es;
	float dist = length(dir);
	if (dist < lights_falloff_range[index].w)
	{
		dir /= dist;
		float n_dot_l = dot(normal, dir);
		if (n_dot_l > 0)
		{
			float3 shadow = 1;
			if (with_shadow)
			{
				shadow = NearestDepthUpsamplingShadowLevel(tc, shadowing_channel).xyz;
			}

			float3 halfway = normalize(dir - view_dir);
			float3 spec = spec_normalize * DistributionTerm(halfway, normal, shininess)
				* FresnelTerm(dir, halfway, c_spec);
			shading = max((c_diff * lights_attrib[index].x + spec * lights_attrib[index].y) * (n_dot_l * atten), 0)
				* irradiance_factor * lights_color[index].rgb * shadow;
		}
	}

	return shading;
}

float3 CalcTBDRPoint(int index, int shadow_index, float3 pos_es, float3 normal, float3 view_dir,
		float3 c_diff, float3 c_spec, float spec_normalize, float shininess, float2 tc, bool with_shadow)
{
	float3 light_pos = lights_pos_es[index].xyz;
	return CalcTBDRShading(light_pos, index, int(lights_attrib[shadow_index + 1].z),
		pos_es, normal, view_dir, c_diff, c_spec, spec_normalize, shininess, tc, with_shadow,
		AttenuationTerm(light_pos, pos_es, lights_falloff_range[index].xyz), 1);
}

float3 CalcTBDRSpot(int index, int shadow_index, float3 pos_es, float3 normal, float3 view_dir,
		float3 c_diff, float3 c_spec, float spec_normalize, float shininess, float2 tc, bool with_shadow)
{
	float3 light_pos = lights_pos_es[index].xyz;
	float3 shading = 0;
	float spot = SpotLighting(light_pos, lights_dir_es[index].xyz,
		float2(lights_pos_es[index].w, lights_dir_es[index].w), pos_es);
	if (spot > 0)
	{
		shading = CalcTBDRShading(light_pos, index, int(lights_attrib[shadow_index + 2].z),
			pos_es, normal, view_dir, c_diff, c_spec, spec_normalize, shininess, tc, with_shadow,
			spot * AttenuationTerm(light_pos, pos_es, lights_falloff_range[index].xyz), 1);
	}
	
	return shading;
}

float3 CalcTBDRSphereArea(int index, int shadow_index, float3 pos_es, float3 normal, float3 view_dir,
		float3 c_diff, float3 c_spec, float spec_normalize, float shininess, float2 tc, bool with_shadow)
{
	float3 light_pos = lights_pos_es[index].xyz;
	light_pos = SphereAreaLightPositionFixup(light_pos, lights_radius_extend[index].x, pos_es,
		normal, view_dir);
	shininess = AreaLightShininessFixup(shininess, light_pos, lights_radius_extend[index].x, pos_es);
	return CalcTBDRShading(light_pos, index, int(lights_attrib[shadow_index + 1].z), pos_es, normal, view_dir,
		c_diff, c_spec, spec_normalize, shininess, tc, with_shadow,
		AttenuationTerm(lights_pos_es[index].xyz, pos_es, lights_falloff_range[index].xyz), 1);
}

float3 CalcTBDRTubeArea(int index, int shadow_index, float3 pos_es, float3 normal, float3 view_dir,
		float3 c_diff, float3 c_spec, float spec_normalize, float shininess, float2 tc, bool with_shadow)
{
	float3 l0 = lights_pos_es[index].xyz - lights_radius_extend[index].yzw - pos_es;
	float3 l1 = lights_pos_es[index].xyz + lights_radius_extend[index].yzw - pos_es;
	float3 light_pos = TubeAreaLightPositionFixup(l0, l1, pos_es, normal, view_dir);
	float2 atten_irra_factor = TubeAreaLightAttenuationIrradianceFixup(l0, l1, normal);
	shininess = AreaLightShininessFixup(shininess, lights_pos_es[index].xyz, lights_radius_extend[index].x, pos_es);
	return CalcTBDRShading(light_pos, index, int(lights_attrib[shadow_index + 1].z), pos_es, normal, view_dir,
		c_diff, c_spec, spec_normalize, shininess, tc, with_shadow,
		atten_irra_factor.x, atten_irra_factor.y);
}

groupshared uint intersected_light_indices_sh[LIGHT_BATCH];
groupshared uint num_intersected_lights_sh;

[numthreads(BLOCK_X, BLOCK_Y, 1)]
void TBDRUnifiedCS(uint3 gid : SV_GroupID,
							uint3 gtid : SV_GroupThreadID,
							uint GI : SV_GroupIndex)
{
	if (0 == GI)
	{
		num_intersected_lights_sh = 0;
	}
	GroupMemoryBarrierWithGroupSync();
	
	float4 planes[6];
	float2 min_max = min_max_depth_tex.Load(gid).xy;
	CalcTileViewFrustum(gid.xy, min_max, planes);

	uint light_start[8];

	for (uint index = lights_type[3] + GI; index < lights_type[4]; index += BLOCK_SIZE)
	{
		if (OverlapTestPoint(planes, index))
		{
			uint light_index;
			InterlockedAdd(num_intersected_lights_sh, 1, light_index);
			intersected_light_indices_sh[light_index] = index;
		}
	}
	GroupMemoryBarrierWithGroupSync();

	light_start[0] = num_intersected_lights_sh;

	for (index = lights_type[4] + GI; index < lights_type[5]; index += BLOCK_SIZE)
	{
		if (OverlapTestPoint(planes, index))
		{
			uint light_index;
			InterlockedAdd(num_intersected_lights_sh, 1, light_index);
			intersected_light_indices_sh[light_index] = index;
		}
	}
	GroupMemoryBarrierWithGroupSync();

	light_start[1] = num_intersected_lights_sh;

	for (index = lights_type[5] + GI; index < lights_type[6]; index += BLOCK_SIZE)
	{
		if (OverlapTestSpot(planes, index))
		{
			uint light_index;
			InterlockedAdd(num_intersected_lights_sh, 1, light_index);
			intersected_light_indices_sh[light_index] = index;
		}
	}
	GroupMemoryBarrierWithGroupSync();

	light_start[2] = num_intersected_lights_sh;
	
	for (index = lights_type[6] + GI; index < lights_type[7]; index += BLOCK_SIZE)
	{
		if (OverlapTestSpot(planes, index))
		{
			uint light_index;
			InterlockedAdd(num_intersected_lights_sh, 1, light_index);
			intersected_light_indices_sh[light_index] = index;
		}
	}
	GroupMemoryBarrierWithGroupSync();

	light_start[3] = num_intersected_lights_sh;
	
	for (index = lights_type[7] + GI; index < lights_type[8]; index += BLOCK_SIZE)
	{
		if (OverlapTestPoint(planes, index))
		{
			uint light_index;
			InterlockedAdd(num_intersected_lights_sh, 1, light_index);
			intersected_light_indices_sh[light_index] = index;
		}
	}
	GroupMemoryBarrierWithGroupSync();

	light_start[4] = num_intersected_lights_sh;

	for (index = lights_type[8] + GI; index < lights_type[9]; index += BLOCK_SIZE)
	{
		if (OverlapTestPoint(planes, index))
		{
			uint light_index;
			InterlockedAdd(num_intersected_lights_sh, 1, light_index);
			intersected_light_indices_sh[light_index] = index;
		}
	}
	GroupMemoryBarrierWithGroupSync();

	light_start[5] = num_intersected_lights_sh;
	
	for (index = lights_type[9] + GI; index < lights_type[10]; index += BLOCK_SIZE)
	{
		if (OverlapTestPoint(planes, index))
		{
			uint light_index;
			InterlockedAdd(num_intersected_lights_sh, 1, light_index);
			intersected_light_indices_sh[light_index] = index;
		}
	}
	GroupMemoryBarrierWithGroupSync();

	light_start[6] = num_intersected_lights_sh;
	
	for (index = lights_type[10] + GI; index < lights_type[11]; index += BLOCK_SIZE)
	{
		if (OverlapTestPoint(planes, index))
		{
			uint light_index;
			InterlockedAdd(num_intersected_lights_sh, 1, light_index);
			intersected_light_indices_sh[light_index] = index;
		}
	}
	GroupMemoryBarrierWithGroupSync();

	light_start[7] = num_intersected_lights_sh;
	
	uint2 tile_start = gid.xy * TILE_SIZE + gtid.xy;
	for (uint tile_y = 0; tile_y < TILE_SIZE; tile_y += BLOCK_Y)
	{
		for (uint tile_x = 0; tile_x < TILE_SIZE; tile_x += BLOCK_X)
		{
			uint3 coord = uint3(tile_start + uint2(tile_x, tile_y), 0);

			[branch]
			if (all(coord.xy < width_height))
			{
				float4 shading;
				[branch]
				if (lighting_mask_tex.Load(coord).x > 0)
				{
					float2 tc = (coord.xy + 0.5f) * inv_width_height;

					float4 mrt_0 = g_buffer_tex.Load(coord);
					float4 mrt_1 = g_buffer_1_tex.Load(coord);
					float3 view_dir = normalize(texcoord_to_view(tc));
					float3 normal = GetNormal(mrt_0);
					float glossiness = GetGlossiness(mrt_0);
					float shininess = Glossiness2Shininess(glossiness);
					float3 pos_es = view_dir * (depth_tex.Load(coord).x / view_dir.z);
					float3 c_diff = GetDiffuse(mrt_1);
					float3 c_spec = GetSpecular(mrt_1);
					
					float spec_normalize = SpecularNormalizeFactor(shininess);

					shading = float4(0, 0, 0, 1);
					for (uint i = lights_type[0]; i < lights_type[1]; ++ i)
					{
						float3 dir = lights_dir_es[i].xyz;
						float n_dot_l = 0.5f + 0.5f * dot(dir, normal);
						float3 halfway = normalize(dir - view_dir);
						shading.rgb += max(c_diff * lights_attrib[i].x * n_dot_l, 0) * lights_color[i].rgb;
					}
					for (i = lights_type[1]; i < lights_type[2]; ++ i)
					{
						float3 dir = lights_dir_es[i].xyz;
						float n_dot_l = dot(normal, dir);
						if (n_dot_l > 0)
						{
							float3 shadow = 1;
							if (int(lights_attrib[0].z) >= 0)
							{
								shadow = NearestDepthUpsamplingShadowLevel(tc, int(lights_attrib[0].z)).xyz;
							}
							float3 halfway = normalize(dir - view_dir);
							float3 spec = spec_normalize * DistributionTerm(halfway, normal, shininess)
								* FresnelTerm(dir, halfway, c_spec);
							shading.rgb += max((c_diff * lights_attrib[i].x + spec * lights_attrib[i].y) * n_dot_l, 0)
								* lights_color[i].rgb * shadow;
						}
					}
					for (i = lights_type[2]; i < lights_type[3]; ++ i)
					{
						float3 dir = lights_dir_es[i].xyz;
						float n_dot_l = dot(normal, dir);
						if (n_dot_l > 0)
						{							
							float3 halfway = normalize(dir - view_dir);
							float3 spec = spec_normalize * DistributionTerm(halfway, normal, shininess)
								* FresnelTerm(dir, halfway, c_spec);
							shading.rgb += max((c_diff * lights_attrib[i].x + spec * lights_attrib[i].y) * n_dot_l, 0)
								* lights_color[i].rgb;
						}
					}

					for (i = 0; i < light_start[0]; ++ i)
					{
						shading.rgb += CalcTBDRPoint(intersected_light_indices_sh[i], -1,
							pos_es, normal, view_dir, c_diff, c_spec, spec_normalize, shininess, tc, false);
					}
					for (i = light_start[0]; i < light_start[1]; ++ i)
					{
						shading.rgb += CalcTBDRPoint(intersected_light_indices_sh[i],
							intersected_light_indices_sh[i] - lights_type[4],
							pos_es, normal, view_dir, c_diff, c_spec, spec_normalize, shininess, tc, true);
					}
					for (i = light_start[1]; i < light_start[2]; ++ i)
					{
						shading.rgb += CalcTBDRSpot(intersected_light_indices_sh[i], -1,
							pos_es, normal, view_dir, c_diff, c_spec, spec_normalize, shininess, tc, false);
					}
					for (i = light_start[2]; i < light_start[3]; ++ i)
					{
						shading.rgb += CalcTBDRSpot(intersected_light_indices_sh[i],
							intersected_light_indices_sh[i] - lights_type[6],
							pos_es, normal, view_dir, c_diff, c_spec, spec_normalize, shininess, tc, true);
					}
					for (i = light_start[3]; i < light_start[4]; ++ i)
					{
						shading.rgb += CalcTBDRSphereArea(intersected_light_indices_sh[i], -1,
							pos_es, normal, view_dir, c_diff, c_spec, spec_normalize, shininess, tc, false);
					}
					for (i = light_start[4]; i < light_start[5]; ++ i)
					{
						shading.rgb += CalcTBDRSphereArea(intersected_light_indices_sh[i],
							intersected_light_indices_sh[i] - lights_type[4],
							pos_es, normal, view_dir, c_diff, c_spec, spec_normalize, shininess, tc, true);
					}
					for (i = light_start[5]; i < light_start[6]; ++ i)
					{
						shading.rgb += CalcTBDRTubeArea(intersected_light_indices_sh[i],
							intersected_light_indices_sh[i] - lights_type[4],
							pos_es, normal, view_dir, c_diff, c_spec, spec_normalize, shininess, tc, false);
					}
					for (i = light_start[6]; i < light_start[7]; ++ i)
					{
						shading.rgb += CalcTBDRTubeArea(intersected_light_indices_sh[i],
							intersected_light_indices_sh[i] - lights_type[4],
							pos_es, normal, view_dir, c_diff, c_spec, spec_normalize, shininess, tc, true);
					}

					if (lights_type[0] == lights_type[1])
					{
						shading += shading_in_tex.Load(coord);
					}
					else
					{
						shading += SkylightShading(glossiness, c_diff, c_spec, normal, -view_dir);
					}
				}
				else
				{
					shading = g_buffer_1_tex.Load(coord);
				}
	
				shading_rw_tex[coord.xy] = shading;
			}
		}
	}
}
		]]>
	</shader>

	<technique name="TBDRUnified">
		<pass name="p0">
			<state name="compute_shader" value="TBDRUnifiedCS()"/>
		</pass>
	</technique>


	<macro name="MAX_NUM_SHADOWED_LIGHTS" value="5"/>

	<parameter type="rw_texture2D" name="projective_shadowing_rw_tex"/>
	<parameter type="rw_texture2D" name="shadowing_rw_tex"/>
	<cbuffer name="light_batch3">
		<parameter type="float4x4" name="lights_view_proj" array_size="MAX_NUM_SHADOWED_LIGHTS"/>
		<parameter type="int" name="filtered_sms_2d_light_index" array_size="MAX_NUM_SHADOWED_LIGHTS"/>
		<parameter type="float" name="esms_scale_factor" array_size="MAX_NUM_SHADOWED_LIGHTS"/>
	</cbuffer>

	<shader type="compute_shader" version="5">
		<![CDATA[		
groupshared bool intersected_shadowing_lights_sh[MAX_NUM_SHADOWED_LIGHTS];
groupshared float2 csm_tc_dd[BLOCK_Y][BLOCK_X];

[numthreads(BLOCK_X, BLOCK_Y, 1)]
void TBDRShadowingUnifiedCS(uint3 gid : SV_GroupID,
							uint3 gtid : SV_GroupThreadID,
							uint GI : SV_GroupIndex)
{
	const uint LT_Ambient = 0;
	const uint LT_Sun = 1;
	const uint LT_Directional = 2;
	const uint LT_Point = 3;
	const uint LT_Spot = 4;
	const uint LT_SphereArea = 5;
	const uint LT_TubeArea = 6;
			
	float4 planes[6];
	float2 min_max = min_max_depth_tex.Load(gid * 2).xy;
	CalcTileViewFrustum(gid.xy * 2, min_max, planes);
	
	if (GI < MAX_NUM_SHADOWED_LIGHTS)
	{
		bool intersected = false;

		if (LT_Sun == lights_type[GI])
		{
			intersected = true;
		}
		else if (LT_Spot == lights_type[GI])
		{
			intersected = OverlapTestSpot(planes, GI);
		}
		else //if ((LT_Point == lights_type[GI]) || (LT_SphereArea == lights_type[GI]) || (LT_TubeArea == lights_type[GI]))
		{
			intersected = OverlapTestPoint(planes, GI);
		}
		
		intersected_shadowing_lights_sh[GI] = intersected;
	}
	GroupMemoryBarrierWithGroupSync();

	uint2 tile_start = gid.xy * TILE_SIZE + gtid.xy;
	for (uint tile_y = 0; tile_y < TILE_SIZE; tile_y += BLOCK_Y)
	{
		for (uint tile_x = 0; tile_x < TILE_SIZE; tile_x += BLOCK_X)
		{
			uint3 coord = uint3(tile_start + uint2(tile_x, tile_y), 0);

			float2 tc = (coord.xy + 0.5f) * inv_width_height;

			float3 view_dir = normalize(texcoord_to_view(tc));
			float3 pos_es = view_dir * (depth_tex.Load(coord * 2).x / view_dir.z);

			uint sun_index = MAX_NUM_SHADOWED_LIGHTS;
			[unroll]
			for (uint i = 0; i < MAX_NUM_SHADOWED_LIGHTS; ++ i)
			{
				if (intersected_shadowing_lights_sh[i] && (LT_Sun == lights_type[i]))
				{
					sun_index = i;
					break;
				}
			}
			float4 sun_tc_ddx_ddy = 0;
			if (sun_index != MAX_NUM_SHADOWED_LIGHTS)
			{
				float2 light_proj_pos = mul(float4(pos_es, 1), lights_view_proj[sun_index]).xy;
				light_proj_pos.y *= -1;
				light_proj_pos = light_proj_pos * 0.5f + 0.5f;

				csm_tc_dd[gtid.y][gtid.x] = light_proj_pos;
				GroupMemoryBarrierWithGroupSync();

				uint2 location = gtid.xy;
				if (0 == gtid.x)
				{
					location.x = 1;
				}
				else if (BLOCK_X - 1 == gtid.x)
				{
					location.x = BLOCK_X - 2;
				}
				if (0 == gtid.y)
				{
					location.y = 1;
				}
				else if (BLOCK_Y - 1 == gtid.y)
				{
					location.y = BLOCK_Y - 2;
				}
				uint2 location_right_down = location + 1;
				sun_tc_ddx_ddy = float4(csm_tc_dd[location.y][location_right_down.x], csm_tc_dd[location_right_down.y][location.x])
					- csm_tc_dd[location.y][location.x].xyxy;
			}

			[branch]
			if (all(coord.xy < width_height) && (lighting_mask_tex.Load(coord * 2).x > 0))
			{
				bool write_projective = false;
				float4 projective_shadowing = 1;
				float4 shadowing = 1;
				for (uint i = 0; i < MAX_NUM_SHADOWED_LIGHTS; ++ i)
				{
					[branch]
					if (intersected_shadowing_lights_sh[i])
					{
						float4 new_shadowing;
						if (LT_Sun == lights_type[i])
						{
							float len = dot(float4(pos_es, 1), view_z_to_light_view);
							new_shadowing = ESMSun(pos_es, csm_tc_dd[gtid.y][gtid.x], sun_tc_ddx_ddy, len,
								esms_scale_factor[i]);
						}
						else if (LT_Spot == lights_type[i])
						{
							float4 light_proj_pos = mul(float4(pos_es, 1), lights_view_proj[i]);
							light_proj_pos /= light_proj_pos.w;
							light_proj_pos.y *= KLAYGE_FLIPPING;
							light_proj_pos.xy = light_proj_pos.xy * 0.5f + 0.5f;
							float len = length(lights_pos_es[i].xyz - pos_es);
							new_shadowing = ESMDirectional(pos_es, light_proj_pos.xy, len, lights_attrib[i].z > 0, lights_attrib[i].w > 0,
								filtered_sms_2d_light_index[i], esms_scale_factor[i]);
						}
						else //if ((LT_Point == lights_type[i]) || (LT_SphereArea == lights_type[i]) || (LT_TubeArea == lights_type[i]))
						{
							float3 dir = lights_pos_es[i].xyz - pos_es;
							float len = length(dir);
							float3 dir_ls = mul(-dir, (float3x3)view_to_light_model);
							new_shadowing = ESMOmnidirectional(dir_ls, len, lights_attrib[i].z > 0, lights_attrib[i].w > 0,
								esms_scale_factor[i]);
						}

						if (0 == i)
						{
							shadowing.x = new_shadowing.x;
						}
						else if (1 == i)
						{
							shadowing.y = new_shadowing.y;
						}
						else if (2 == i)
						{
							shadowing.z = new_shadowing.z;
						}
						else if (3 == i)
						{
							shadowing.w = new_shadowing.w;
						}
						else if (4 == i)
						{
							projective_shadowing = new_shadowing;
							write_projective = true;
						}
					}
				}

				if (write_projective)
				{
					projective_shadowing_rw_tex[coord.xy] = projective_shadowing;
				}
				shadowing_rw_tex[coord.xy] = shadowing;
			}
		}
	}
}
		]]>
	</shader>

	<technique name="TBDRShadowingUnified">
		<pass name="p0">
			<state name="compute_shader" value="TBDRShadowingUnifiedCS()"/>
		</pass>
	</technique>
</effect>
