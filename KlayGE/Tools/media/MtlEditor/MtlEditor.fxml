<?xml version='1.0'?>

<effect>
	<include name="GBuffer.fxml"/>

	<cbuffer name="less_freq">
		<parameter type="int" name="vertex_usage"/>
		<parameter type="int" name="vertex_usage_index"/>
		<parameter type="int" name="texture_slot"/>
	</cbuffer>

	<macro name="VEU_Position" value="0"/>
	<macro name="VEU_Normal" value="1"/>
	<macro name="VEU_Diffuse" value="2"/>
	<macro name="VEU_Specular" value="3"/>
	<macro name="VEU_BlendWeight" value="4"/>
	<macro name="VEU_BlendIndex" value="5"/>
	<macro name="VEU_TextureCoord" value="6"/>
	<macro name="VEU_Tangent" value="7"/>
	<macro name="VEU_Binormal" value="8"/>
	
	<macro name="TS_Diffuse" value="0"/>
	<macro name="TS_Specular" value="1"/>
	<macro name="TS_Shininess" value="2"/>
	<macro name="TS_Normal" value="3"/>
	<macro name="TS_Height" value="4"/>
	<macro name="TS_Emit" value="5"/>
	<macro name="TS_Opacity" value="6"/>

	<shader>
		<![CDATA[
float4 VisualizeVertex(float3 pos, float3 tangent, float3 binormal, float3 normal,
						float4 blend_weights, int4 blend_indices, float2 tex)
{
	float4 oClr;
	if (VEU_Position == vertex_usage)
	{
		oClr = float4(pos, 1);
	}
	else if (VEU_Normal == vertex_usage)
	{
		oClr = float4(normal / 2 + 0.5f, 1);
	}
	else if (VEU_BlendWeight == vertex_usage)
	{
		oClr = blend_weights;
	}
	else if (VEU_BlendIndex == vertex_usage)
	{
		oClr = blend_indices / 255.0f;
	}
	else if (VEU_TextureCoord == vertex_usage)
	{
		oClr = float4(tex, 0, 1);
	}
	else if (VEU_Tangent == vertex_usage)
	{
		oClr = float4(tangent / 2 + 0.5f, 1);
	}
	else// if (VEU_Binormal == vertex_usage)
	{
		oClr = float4(binormal / 2 + 0.5f, 1);
	}

	return oClr;
}

float4 VisualizeTexture(float2 tex0)
{
	float4 ret;
	if (TS_Diffuse == texture_slot)
	{
		if (diffuse_clr.w > 0.5f)
		{
			ret = float4(diffuse_tex.Sample(aniso_sampler, tex0).rgb, 1);
		}
		else
		{
			ret = float4(diffuse_clr.rgb, 1);
		}
	}
	else if (TS_Specular == texture_slot)
	{
		if (specular_clr.w > 0.5f)
		{
			ret = float4(specular_tex.Sample(aniso_sampler, tex0).rgb, 1);
		}
		else
		{
			ret = float4(specular_clr.rgb, 1);
		}
	}
	else if (TS_Shininess == texture_slot)
	{
		if (shininess_clr.y > 0.5f)
		{
			ret = float4(shininess_tex.Sample(aniso_sampler, tex0).rrr, 1);
		}
		else
		{
			ret = float4(shininess_clr.rrr, 1);
		}
	}
	else if (TS_Normal == texture_slot)
	{
		if (normal_map_enabled)
		{
			ret = float4(decompress_normal(normal_tex.Sample(aniso_sampler, tex0)).rgb, 1);
		}
		else
		{
			ret = float4(0, 0, 1, 1);
		}
	}
	else if (TS_Height == texture_slot)
	{
		if (height_map_parallax_enabled || height_map_tess_enabled)
		{
			ret = float4(height_tex.Sample(aniso_sampler, tex0).rrr, 1);
		}
		else
		{
			ret = float4(0, 0, 0, 1);
		}
	}
	else if (TS_Emit == texture_slot)
	{
		if (emit_clr.w > 0.5f)
		{
			ret = float4(emit_tex.Sample(aniso_sampler, tex0).rgb * 16, 1);
		}
		else
		{
			ret = float4(emit_clr.rgb, 1);
		}
	}
	else //if (TS_Opacity == texture_slot)
	{
		if (opacity_map_enabled)
		{
			ret = diffuse_tex.Sample(aniso_sampler, tex0).a;
		}
		else
		{
			ret = opacity_clr;
		}
	}

	return ret;
}

void VisualizeVertexVS(float4 pos : POSITION,
				float2 texcoord : TEXCOORD0,
				float4 tangent_quat	: TANGENT,	// in object space
#if SKINNING_ON
				float4 blend_weights : BLENDWEIGHT,
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
				float4 blend_indices_f : BLENDINDICES,
#else
				uint4 blend_indices : BLENDINDICES,
#endif
#endif
				out float4 oClr : COLOR,
				out float4 oPos : SV_Position)
{
#if SKINNING_ON
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
	int4 blend_indices = (int4)blend_indices_f;
#endif
#else
	float4 blend_weights = 0;
	int4 blend_indices = 0;
#endif

	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	tangent_quat = tangent_quat * 2 - 1;
	
	float3 result_pos;
	float4 result_tangent_quat;
	float2 oTex;
	CalcMesh(pos, texcoord, tangent_quat,
#if SKINNING_ON
				blend_weights, blend_indices,
#endif
				oTex, result_pos,
				result_tangent_quat);
				
	float3x3 obj_to_ts;
	obj_to_ts[0] = transform_quat(float3(1, 0, 0), result_tangent_quat);
	obj_to_ts[1] = transform_quat(float3(0, 1, 0), result_tangent_quat) * sign(result_tangent_quat.w);
	obj_to_ts[2] = transform_quat(float3(0, 0, 1), result_tangent_quat);

	oPos = mul(float4(result_pos, 1), mvp);
	oClr = VisualizeVertex(result_pos, obj_to_ts[0], obj_to_ts[1], obj_to_ts[2], blend_weights, blend_indices, oTex);
}

void VisualizeVertexMRTPS(float4 clr : COLOR,
				out float4 mrt_0 : SV_Target0, out float4 mrt_1 : SV_Target1)
{
	mrt_0 = 0;
	mrt_1 = clr;
}

void VisualizeTextureMRTPS(float2 tex0 : TEXCOORD0,
				out float4 mrt_0 : SV_Target0, out float4 mrt_1 : SV_Target1)
{
	mrt_0 = 0;
	mrt_1 = VisualizeTexture(tex0);
}
		]]>
	</shader>

	<technique name="VisualizeVertexMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="VisualizeVertexVS()"/>
			<state name="pixel_shader" value="VisualizeVertexMRTPS()"/>
		</pass>
	</technique>

	<technique name="VisualizeTextureMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="128"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="128"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="VisualizeTextureMRTPS()"/>
		</pass>
	</technique>
</effect>
